{"version":3,"sources":["../src/index.ts","../src/Downloader.ts"],"sourcesContent":["export * from './Downloader';\nexport * as ytdl from 'youtube-dl-exec';\n\n// eslint-disable-next-line @typescript-eslint/no-inferrable-types\nexport const version: string = '3.0.2';\n","import ytdl from 'youtube-dl-exec';\n\nexport interface Info {\n    title: string;\n    duration: number;\n    thumbnail: string;\n    views: number;\n    author: string;\n    description: string;\n    url: string;\n    source: string;\n    engine: import('stream').Readable;\n}\n\nexport class Downloader {\n    constructor() {\n        return Downloader;\n    }\n\n    /**\n     * Downloads stream through youtube-dl\n     * @param {string} url URL to download stream from\n     */\n    static download(url: string) {\n        if (!url || typeof url !== 'string') throw new Error('Invalid url');\n\n        const ytdlProcess = ytdl.exec(url, {\n            output: '-',\n            quiet: true,\n            preferFreeFormats: true,\n            limitRate: '100K'\n        });\n\n        if (!ytdlProcess.stdout) throw new Error('No stdout');\n        const stream = ytdlProcess.stdout;\n\n        stream.on('error', () => {\n            if (!ytdlProcess.killed) ytdlProcess.kill();\n            stream.resume();\n        });\n\n        return stream;\n    }\n\n    /**\n     * Returns stream info\n     * @param {string} url stream url\n     */\n    static getInfo(url: string) {\n        return new Promise<{ playlist: any; info: Info[] }>(async (resolve, reject) => {\n            if (!url || typeof url !== 'string') reject(new Error('Invalid url'));\n\n            const info = await ytdl(url, {\n                dumpSingleJson: true,\n                skipDownload: true,\n                simulate: true\n            }).catch(() => undefined);\n            if (!info) return resolve({ playlist: null, info: [] });\n\n            try {\n                const data = {\n                    title: info.fulltitle || info.title || 'Attachment',\n                    duration: (info.duration || 0) * 1000,\n                    thumbnail: info.thumbnails ? info.thumbnails[0].url : info.thumbnail || 'https://upload.wikimedia.org/wikipedia/commons/2/2a/ITunes_12.2_logo.png',\n                    views: info.view_count || 0,\n                    author: info.uploader || info.channel || 'YouTubeDL Media',\n                    description: info.description || '',\n                    url: url,\n                    source: info.extractor,\n                    get engine() {\n                        return Downloader.download(url);\n                    }\n                } as Info;\n\n                resolve({ playlist: null, info: [data] });\n            } catch {\n                resolve({ playlist: null, info: [] });\n            }\n        });\n    }\n\n    static validate(url: string) {\n        const REGEX =\n            /^(?:(?:https?|ftp):\\/\\/)?(?:(?!(?:10|127)(?:\\.\\d{1,3}){3})(?!(?:169\\.254|192\\.168)(?:\\.\\d{1,3}){2})(?!172\\.(?:1[6-9]|2\\d|3[0-1])(?:\\.\\d{1,3}){2})(?:[1-9]\\d?|1\\d\\d|2[01]\\d|22[0-3])(?:\\.(?:1?\\d{1,2}|2[0-4]\\d|25[0-5])){2}(?:\\.(?:[1-9]\\d?|1\\d\\d|2[0-4]\\d|25[0-4]))|(?:(?:[a-z\\u00a1-\\uffff0-9]-*)*[a-z\\u00a1-\\uffff0-9]+)(?:\\.(?:[a-z\\u00a1-\\uffff0-9]-*)*[a-z\\u00a1-\\uffff0-9]+)*(?:\\.(?:[a-z\\u00a1-\\uffff]{2,})))(?::\\d{2,5})?(?:\\/\\S*)?$/;\n        return REGEX.test(url || '');\n    }\n\n    static get important() {\n        return true;\n    }\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA,cAAAA;AAAA;AAAA;;;ACAA,6BAAiB;AAcV,IAAM,aAAN,MAAiB;AAAA,EACpB,cAAc;AACV,WAAO;AAAA,EACX;AAAA,EAMA,OAAO,SAAS,KAAa;AACzB,QAAI,CAAC,OAAO,OAAO,QAAQ;AAAU,YAAM,IAAI,MAAM,aAAa;AAElE,UAAM,cAAc,uBAAAC,QAAK,KAAK,KAAK;AAAA,MAC/B,QAAQ;AAAA,MACR,OAAO;AAAA,MACP,mBAAmB;AAAA,MACnB,WAAW;AAAA,IACf,CAAC;AAED,QAAI,CAAC,YAAY;AAAQ,YAAM,IAAI,MAAM,WAAW;AACpD,UAAM,SAAS,YAAY;AAE3B,WAAO,GAAG,SAAS,MAAM;AACrB,UAAI,CAAC,YAAY;AAAQ,oBAAY,KAAK;AAC1C,aAAO,OAAO;AAAA,IAClB,CAAC;AAED,WAAO;AAAA,EACX;AAAA,EAMA,OAAO,QAAQ,KAAa;AACxB,WAAO,IAAI,QAAyC,OAAO,SAAS,WAAW;AAC3E,UAAI,CAAC,OAAO,OAAO,QAAQ;AAAU,eAAO,IAAI,MAAM,aAAa,CAAC;AAEpE,YAAM,OAAO,UAAM,uBAAAA,SAAK,KAAK;AAAA,QACzB,gBAAgB;AAAA,QAChB,cAAc;AAAA,QACd,UAAU;AAAA,MACd,CAAC,EAAE,MAAM,MAAM,MAAS;AACxB,UAAI,CAAC;AAAM,eAAO,QAAQ,EAAE,UAAU,MAAM,MAAM,CAAC,EAAE,CAAC;AAEtD,UAAI;AACA,cAAM,OAAO;AAAA,UACT,OAAO,KAAK,aAAa,KAAK,SAAS;AAAA,UACvC,WAAW,KAAK,YAAY,KAAK;AAAA,UACjC,WAAW,KAAK,aAAa,KAAK,WAAW,GAAG,MAAM,KAAK,aAAa;AAAA,UACxE,OAAO,KAAK,cAAc;AAAA,UAC1B,QAAQ,KAAK,YAAY,KAAK,WAAW;AAAA,UACzC,aAAa,KAAK,eAAe;AAAA,UACjC;AAAA,UACA,QAAQ,KAAK;AAAA,UACb,IAAI,SAAS;AACT,mBAAO,WAAW,SAAS,GAAG;AAAA,UAClC;AAAA,QACJ;AAEA,gBAAQ,EAAE,UAAU,MAAM,MAAM,CAAC,IAAI,EAAE,CAAC;AAAA,MAC5C,QAAE;AACE,gBAAQ,EAAE,UAAU,MAAM,MAAM,CAAC,EAAE,CAAC;AAAA,MACxC;AAAA,IACJ,CAAC;AAAA,EACL;AAAA,EAEA,OAAO,SAAS,KAAa;AACzB,UAAM,QACF;AACJ,WAAO,MAAM,KAAK,OAAO,EAAE;AAAA,EAC/B;AAAA,EAEA,WAAW,YAAY;AACnB,WAAO;AAAA,EACX;AACJ;AA5Ea;;;ADbb,IAAAC,QAAsB;AAGf,IAAM,UAAkB;","names":["ytdl","ytdl","ytdl"]}