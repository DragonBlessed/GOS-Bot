"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var src_exports = {};
__export(src_exports, {
  Downloader: () => Downloader,
  version: () => version,
  ytdl: () => ytdl2
});
module.exports = __toCommonJS(src_exports);

// src/Downloader.ts
var import_youtube_dl_exec = __toESM(require("youtube-dl-exec"));
var Downloader = class {
  constructor() {
    return Downloader;
  }
  static download(url) {
    if (!url || typeof url !== "string")
      throw new Error("Invalid url");
    const ytdlProcess = import_youtube_dl_exec.default.exec(url, {
      output: "-",
      quiet: true,
      preferFreeFormats: true,
      limitRate: "100K"
    });
    if (!ytdlProcess.stdout)
      throw new Error("No stdout");
    const stream = ytdlProcess.stdout;
    stream.on("error", () => {
      if (!ytdlProcess.killed)
        ytdlProcess.kill();
      stream.resume();
    });
    return stream;
  }
  static getInfo(url) {
    return new Promise(async (resolve, reject) => {
      if (!url || typeof url !== "string")
        reject(new Error("Invalid url"));
      const info = await (0, import_youtube_dl_exec.default)(url, {
        dumpSingleJson: true,
        skipDownload: true,
        simulate: true
      }).catch(() => void 0);
      if (!info)
        return resolve({ playlist: null, info: [] });
      try {
        const data = {
          title: info.fulltitle || info.title || "Attachment",
          duration: (info.duration || 0) * 1e3,
          thumbnail: info.thumbnails ? info.thumbnails[0].url : info.thumbnail || "https://upload.wikimedia.org/wikipedia/commons/2/2a/ITunes_12.2_logo.png",
          views: info.view_count || 0,
          author: info.uploader || info.channel || "YouTubeDL Media",
          description: info.description || "",
          url,
          source: info.extractor,
          get engine() {
            return Downloader.download(url);
          }
        };
        resolve({ playlist: null, info: [data] });
      } catch {
        resolve({ playlist: null, info: [] });
      }
    });
  }
  static validate(url) {
    const REGEX = /^(?:(?:https?|ftp):\/\/)?(?:(?!(?:10|127)(?:\.\d{1,3}){3})(?!(?:169\.254|192\.168)(?:\.\d{1,3}){2})(?!172\.(?:1[6-9]|2\d|3[0-1])(?:\.\d{1,3}){2})(?:[1-9]\d?|1\d\d|2[01]\d|22[0-3])(?:\.(?:1?\d{1,2}|2[0-4]\d|25[0-5])){2}(?:\.(?:[1-9]\d?|1\d\d|2[0-4]\d|25[0-4]))|(?:(?:[a-z\u00a1-\uffff0-9]-*)*[a-z\u00a1-\uffff0-9]+)(?:\.(?:[a-z\u00a1-\uffff0-9]-*)*[a-z\u00a1-\uffff0-9]+)*(?:\.(?:[a-z\u00a1-\uffff]{2,})))(?::\d{2,5})?(?:\/\S*)?$/;
    return REGEX.test(url || "");
  }
  static get important() {
    return true;
  }
};
__name(Downloader, "Downloader");

// src/index.ts
var ytdl2 = __toESM(require("youtube-dl-exec"));
var version = "3.0.2";
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  Downloader,
  version,
  ytdl
});
//# sourceMappingURL=index.js.map